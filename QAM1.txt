clear
N = 10^6; % number of bits
M=16; %M-QAM [M=4,16,64,128...]
k = sqrt(1/((2/3)*(M-1))); % normalizing factor
 
m = [1:sqrt(M)/2]; 
alphaMqam = [-(2*m-1) 2*m-1]; % symbols for M-QAM modulation
 
Eb_N0_dB = [0:30]; % multiple Eb/N0 values
 
ipHat = zeros(1,N); % initialzng
 
Th=input('Enter the number of Channel Taps :');%take input from user(enter 5 i.e)
 
for ii = 1:length(Eb_N0_dB)
       
    ip = randsrc(1,N,alphaMqam) + j*randsrc(1,N,alphaMqam);%generate input symbols
    s = k*ip; % normalization of energy to 1
     
    n = 1/sqrt(2)*[randn(1,N) + j*randn(1,N)]; % white guassian noise, 0dB variance
    h =1/sqrt(2)*[randn(Th,N) + j*randn(Th,N)]; % Rayleigh fading channel
 
     signal = (1/sqrt(Th))*kron(ones(Th,1),s); %signal
     
    % Channel and noise Noise addition
   phase= exp(j*angle(h));%calculate the phase of channel
   phase_conjugate=conj(phase);%conjugate of phase 
   bf_ch= h.*phase_conjugate;%beamforming channel
    
    y1 = sum(h.*signal,1) + 10^(-Eb_N0_dB(ii)/20)*n; %signal received without Beamforming
    y2 = sum(bf_ch.*signal,1) + 10^(-Eb_N0_dB(ii)/20)*n; %receivd with Beamforming
    
 
    % Receiver side-Equalization
   
   y1Hat = y1./sum(h,1); 
   y2Hat = y2./sum(bf_ch,1); 
 
 
    % demodulation
    y_re1 = real(y1Hat); % real part
    y_im1 = imag(y1Hat); % imaginary part
 
     y_re2 = real(y2Hat); % real part
    y_im2 = imag(y2Hat); % imaginary part
     
    
    
   %keep in mind that symbols used for M-QAM are odd numbers
   %...1,3,5,7,9,13.........
    % rounding to the nearest symbol
    % 0 to 2 --> 1
    % 2 to 4 --> 3
    % 4 to 6 --> 5 etc
    ipHat_re1 = 2*floor(y_re1/2)+1;
    ipHat_re1(find(ipHat_re1>max(alphaMqam))) = max(alphaMqam);
    ipHat_re1(find(ipHat_re1<min(alphaMqam))) = min(alphaMqam);
     
    % rounding to the nearest symbol
    % 0 to 2 --> 1
    % 2 to 4 --> 3
    % 4 to 6 --> 5 etc
    ipHat_re2 = 2*floor(y_re2/2)+1;
    ipHat_re2(find(ipHat_re2>max(alphaMqam))) = max(alphaMqam);
    ipHat_re2(find(ipHat_re2<min(alphaMqam))) = min(alphaMqam);
      
     
     
  
    % rounding to the nearest alphabet
    % 0 to 2 --> 1
    % 2 to 4 --> 3
    % 4 to 6 --> 5 etc
    ipHat_im1 = 2*floor(y_im1/2)+1;
    ipHat_im1(find(ipHat_im1>max(alphaMqam))) = max(alphaMqam);
    ipHat_im1(find(ipHat_im1<min(alphaMqam))) = min(alphaMqam);
     
    % rounding to the nearest alphabet
    % 0 to 2 --> 1
    % 2 to 4 --> 3
    % 4 to 6 --> 5 etc
    ipHat_im2 = 2*floor(y_im2/2)+1;
    ipHat_im2(find(ipHat_im2>max(alphaMqam))) = max(alphaMqam);
    ipHat_im2(find(ipHat_im2<min(alphaMqam))) = min(alphaMqam);
     
     
    ipHat1 = ipHat_re1 + j*ipHat_im1;
    nErr1(ii) = size(find([ip- ipHat1]),2); % couting the number of errors
     
     
    ipHat2 = ipHat_re2+ j*ipHat_im2;
    nErr2(ii) = size(find([ip- ipHat2]),2); % couting the number of errors
     
     
     
 
end
 
 
simBer1 = nErr1/N; %BER (without beam forming)
simBer2 = nErr2/N; %BER (with beam forming)
 
 
 
close all
figure
 
semilogy(Eb_N0_dB,simBer1,'rx-','LineWidth',2);
hold on
semilogy(Eb_N0_dB,simBer2,'bx-','LineWidth',2);
axis auto 
grid on 
legend('(no Beamforming-sim)','(Beamforming-sim)');
 
xlabel('Eb/No, dB');
ylabel('Bit Error Rate');
title('BER for 16QAM modulation in Rayleigh multitap channel');
 
msgbox('"Beamforming Technique implemented Succcessfully!"','Result');
